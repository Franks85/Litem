// lista shortcut for react

imp→	import moduleName from 'module'
imn→	import 'module'
imd→	import { destructuredModule } from 'module'
ime→	import * as alias from 'module'
ima→	import { originalName as aliasName} from 'module'
exp→	export default moduleName
exd→	export { destructuredModule } from 'module'
exa→	export { originalName as aliasName} from 'module'
enf→	export const functionName = (params) => { }
edf→	export default (params) => { }
met→	methodName = (params) => { }
fre→	arrayName.forEach(element => { }
fof→	for(let itemName of objectName { }
fin→	for(let itemName in objectName { }
anfn→	(params) => { }
nfn→	const functionName = (params) => { }
dob→	const {propName} = objectToDescruct
dar→	const [propName] = arrayToDescruct
sti→	setInterval(() => { }, intervalTime
sto→	setTimeout(() => { }, delayTime
prom→	return new Promise((resolve, reject) => { }
cmmb→	comment block

imr→	import React from 'react'
imrc→	import React, { Component } from 'react'
imrcp→	import React, { Component } from 'react' & import PropTypes from 'prop-types'
imrpc→	import React, { PureComponent } from 'react'
imrpcp→	import React, { PureComponent } from 'react' & import PropTypes from 'prop-types'
redux→	import { connect } from 'react-redux'
rconst→	constructor(props) with this.state
rconc→	constructor(props, context) with this.state
est→	this.state = { }
cwm→	componentWillMount = () => { }
cdm→	componentDidMount = () => { }
cwr→	componentWillReceiveProps = (nextProps) => { }
scu→	shouldComponentUpdate = (nextProps, nextState) => { }
cwup→	componentWillUpdate = (nextProps, nextState) => { }
cdup→	componentDidUpdate = (prevProps, prevState) => { }
cwun→	componentWillUnmount = () => { }
ren→	render() { return( ) }
sst→	this.setState({ })


// lista shortcut for js standard

rcc→	class component skeleton
rccp→	class component skeleton with prop types after the class
rcjc→	class component skeleton without import and default export lines
rcfc→	class component skeleton that contains all the lifecycle methods
rsc→	stateless component skeleton
rscp→	stateless component with prop types skeleton
rpt→	empty propTypes declaration
con→	class default constructor with props
conc→	class default constructor with props and context
est→	empty state object
cwm→	componentWillMount method
cdm→	componentDidMount method
cwr→	componentWillReceiveProps method
scu→	shouldComponentUpdate method
cwup→	componentWillUpdate method
cdup→	componentDidUpdate method
cwun→	componentWillUnmount method
ren→	render method
sst→	this.setState with object as parameter
ssf→	this.setState with function as parameter
props→	this.props
state→	this.state
// creare Class component

import React, {Component} from 'react';

class Checkout extends Component {
    render() {
        return('');
    }
}

export default Checkout;


// creare componenti stateless

import React from 'react';

const burgerIngredient = (props) => {
    return(
        <div>

        </div>
    );
};

export default burgerIngredient;

// componenti che ritornano semplice jsx

import React from 'react';

const burgerIngredient = (props) => (
    
);
    
export default burgerIngredient;

//  link firebase database

https://burger-react-32ef8.firebaseio.com/


// create reducer

const reducer = (state, action) => {
    return state;
};

export default reducer;

// mapDispatch

const mapDispatchToProps = dispatch => {
    return {
        
    }
};

// mapState

const mapStateToProps = state => {
    return {
        
    }
};

// creare un reducer

import * as actionTypes from '../actions/actionTypes';

const initialState = {
    
};

const reducer = (state=initialState, action) => {
    switch(action.type) {
        
        default: 
            return state;
    }
}

export default reducer;

// base async action (redux-thunk)

export const fetchUser = () => async dispatch => {
  const res = await axios.get("/api/current_user");
  dispatch({
    type: actionType.FETCH_USER,
    payload: res
  });
};

// Test basic configuration

import React from 'react';

import {configure, shallow} from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';

configure({adapter: new Adapter()});

describe('<BurgerBuilder />', () => {
    let wrapper;
    beforeEach(() => {
        wrapper = shallow(<BurgerBuilder />);
    })

});

// create a model class width moongose (server-side)

const mongoose = require('mongoose');
const {Schema} = mongoose;

const userSchema = new Schema({
    // add property
});

module.exports = mongoose.model('users', userSchema);